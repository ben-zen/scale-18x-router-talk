#+TITLE: Beyond Two Cans and a String: A practical guide to building a router
#+AUTHOR: Ben Lewis

* Consumer routers bore me

** Background
I like to manage my equipment via command lines and SSH; it means I have a
uniform interface when dealing with machines all over the place, and I can use
it from pretty much anywhere-even my phone.

But command line interfaces just aren't common on most consumer equipment sold
today, in fact, they basically don't exist. That's a huge bummer for me, and
caused me to start looking for other options.

** Limitations

*** Random failures
    Be it ARP table overflows, memory leaks, overheating, or poor antenna
    performance, I've just not had good luck with consumer routers.

*** Software stack
    Weak configuration options-often limited to port forwarding or sticking a
    machine in a DMZ-and minimal firewall options beyond simply providing NAT.

** Goals

*** Be upgradeable
    While inexpensive, consumer routers are often extremely limited; if you look
    at the OpenWRT wiki, there's an entire warning about 4/32 devices, which
    have only 4MB of RAM and 32MB of flash storage; these devices can barely fit
    their firmware when they're shipped out, let alone run extra tools! By using
    commodity desktop hardware, we can swap out components, such as adding
    higher-bandwidth NICs (10GbE hardware is pretty inexpensive now) or other
    specialized additions.

*** Be easy to manage

**** Familiar network analysis tools
     Instead of trying to figure out what strange configuration is present, or
     divine what IP address has gotten assigned, all of your familiar command
     line tools, like src_sh{ip addr} or src_sh{ip route} are there, close at
     hand.

*** Be a test bed for exploring network ideas
    A full operating system on your router offers you lots of opportunities to
    try out different tools or technologies

**** Docker containers on your router
     I host my Unifi Controller on my router as a Docker container, which avoids
     using a separate physical device

**** Logging or traffic analysis

* Selecting hardware

** Constraints

*** RAM
    4GB of RAM is more than enough for a basic firewall; if you want to add more
    services, however, you'll want more.

*** CPU
    Any recent CPU will be powerful enough--here your concerns are cost and
    heat, mainly. Low-power embedded CPUs are great for low- or no-noise
    operation.

*** Storage
    120GB SSDs are $20 or less on Newegg; a lot of boards designed for a usecase
    like this are also built to be booted off of flash drives or SD cards.

*** NICs
    This is the heart of choosing what you'll use as a router; at a minimum, you
    need two interfaces: one external, one internal. If you've got a separate
    switch you're using for your internal network, that may be all you need; if
    you want other machines directly connected to your router, however, you'll
    need more.

    A key point with NIC selection is driver support.

** Approaches

*** Pre-built

*** Small Form Factor

*** Rackmount

** Considerations for expandability

* Software stack

** Decide what matters to you

** Axes of choice

*** Graphical/web interface
    Some options are more configurable through webpages and graphical
    environments, but are less configurable through text interfaces; careful
    configuration of interfaces and potentially a VPN may be needed to remotely
    manage some of these stacks.

*** Preference in base OS
    The mon0wall derivatives (pfSense, OPNsense) are all FreeBSD derivatives; in
    other cases, you may prefer running a Linux kernel-for familiarity's sake,
    or because of hardware support.

*** Support model

    Paid support options exist for many firewall-oriented distros and
    derivatives; generally speaking, there's also community support available,
    but you may or may not find what you need in forums, especially when dealing
    with unusual hardware or network configurations.

* Configuring a router

** Installing the OS

** Configuring IPv4 routing

*** The ~/proc/sys/net~ filesystem

** Configuring IPv6 routing (Optional, recommended?)

*** SLAAC and PD-assigned address

**** accept_ra and the tri-state boolean
From [[https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt][ip-sysctl.txt]] in the Linux kernel documentation,
#+BEGIN_QUOTE
Possible values are:
    0 Do not accept Router Advertisements.
    1 Accept Router Advertisements if forwarding is disabled.
    2 Overrule forwarding behaviour. Accept Router Advertisements
      even if forwarding is enabled.
#+END_QUOTE

Note that this means we'll want to set ~accept_ra~ to ~2~ /specifically/ on our
WAN interface for IPv6 support.

*** 6to4 tunnel (Hurricane Electric)

** Configuring firewall rules

*** nftables versus frontends

*** Don't block ICMPv6!
    It's hard to stress this enough. Blocking ICMPv6 is a great way to destroy 

*** Forwarding

** Throughput considerations

*** Jumbo Frames

* Other configurations

** Virtualized firewall

*** Why

*** How

*** Issues you might run into

**** Drivers and PCIe Passthrough

** Multiple firewalls
   Seen as a "defense in depth" strategy, this takes the medieval walled city
   approach to network design. Here, we have 
