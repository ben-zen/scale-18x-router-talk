#+TITLE: Beyond Two Cans and a String
#+AUTHOR: Ben Lewis
#+EMAIL: zenrider@blacklodgeresearch.org
#+DATE: \today
#+startup: beamer
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [bigger]
#+BEAMER_THEME: Hannover
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+OPTIONS: H:2
#+DESCRIPTION: You can build a router with the things you have at home, like
#+DESCRIPTION: a spare computer. This talk will cover the choices available to
#+DESCRIPTION: the home sysadmin, and help guide your homelab decision making.
#+KEYWORDS:
#+SUBTITLE: A practical guide to building a router
#+LATEX_COMPILER: pdflatex



* Consumer routers bore me

** Background

I'm an unabashed text console enthusiast. I like to manage my equipment via
command lines and SSH; it means I have a uniform interface when dealing with
machines all over the place, and I can use it from pretty much anywhere-even my
phone.

But command line interfaces just aren't common on most consumer equipment sold
today, in fact, they basically don't exist. That's a huge bummer for me, and
caused me to start looking for other options.

** Limitations of consumer hardware

*** Random failures
    Be it ARP table overflows, memory leaks, overheating, or poor antenna
    performance, I've just not had good luck with consumer routers.
    
*** Software stack
    Weak configuration options-often limited to port forwarding or sticking a
    machine in a DMZ-and minimal firewall options beyond simply providing NAT.

*** Security vulnerabilities

**** Insecure default passwords and configurations
There are insecure default settings on so many routers, and they often
support management protocols which are also inherently insecure.

**** Out-of-date protocols

***** WPAv3
***** TLS 1.3
***** Certificate standards (deprecation of RSA-1)

**** Netgear routerlogin.net private cert
[[https://gist.github.com/nstarke/a611a19aab433555e91c656fe1f030a9][Netgear's routerlogin.net private cert]] was found to have been leaked /while I
was writing this talk/ and that's far from the only security issue we've
seen.

** Goals for our router

*** Be upgradeable
    While inexpensive, consumer routers are often extremely limited; if you look
    at the OpenWRT wiki, there's an entire warning about 4/32 devices, which
    have only 4MB of RAM and 32MB of flash storage; these devices can barely fit
    their firmware when they're shipped out, let alone run extra tools! By using
    commodity desktop hardware, we can swap out components, such as adding
    higher-bandwidth NICs (10GbE hardware is pretty inexpensive now) or other
    specialized additions.

*** Be easy to manage

**** Familiar network analysis tools
     Instead of trying to figure out what strange configuration is present, or
     divine what IP address has gotten assigned, all of your familiar command
     line tools, like src_sh{ip addr} or src_sh{ip route} are there, close at
     hand.

*** Be a test bed for exploring network ideas
    A full operating system on your router offers you lots of opportunities to
    try out different tools or technologies

**** Docker containers on your router
     I host my Unifi Controller on my router as a Docker container, which avoids
     using a separate physical device

**** Dynamic DNS

**** A little home website
**** Logging or traffic analysis

* Selecting hardware
  I'm starting with hardware selection, but really both hardware and software
  have to be considered in tandem, since one will inform the other. This may
  evolve as you build your system, too! Maybe you decide that one approach isn't
  working for you after you've done some basic setup. That's okay. Just remember
  to take notes and log your progress.
** Constraints or parameters

*** RAM
    4GB of RAM is more than enough for a basic firewall; if you want to add more
    services, however, you'll want more. Once you start considering
    virtualization, 16 or 32 might be needed or useful.

*** CPU
    Any recent CPU will be powerful enough--here your concerns are cost and
    heat, mainly. Low-power embedded CPUs are great for low- or no-noise
    operation.

*** Storage
    120GB SSDs are $20 or less on Newegg; a lot of boards designed for a usecase
    like this are also built to be booted off of flash drives or SD cards.

**** Extra capacity
     If you're interested in doing more edge computing on your router-logging,
     traffic shaping, running an HTTP server for a personal website (why not?)
     you might want additional storage. This doesn't need to be an SSD, spinning
     platters will do fine.

*** NICs
    This is the heart of choosing what you'll use as a router; at a minimum, you
    need two interfaces: one external, one internal. If you've got a separate
    switch you're using for your internal network, that may be all you need; if
    you want other machines directly connected to your router, however, you'll
    need more.
   
**** Onboard, on-motherboard NICs
     Assuming your motherboard has at least two NICs, you can forego all of the
     complexity and just use those devices.

**** PCIe card NIC
If you want to do a little more than the motherboard can support directly,
either in capacity or speed (or both!) an add-in card might be a good
choice. With a PCIe card, you can get SFP+ ports and full 10GbE speeds.

One issue I've encountered is, if you install an expansion card NIC, some
motherboard firmwares will disable the onboard NIC by default. You may want
that! In my case, I really didn't. So, if your NIC suddenly doesn't work when
you install an additional one, you should look for this in the BIOS/EFI.

**** Drivers a consideration
A key point with NIC selection is driver support; depending on your OS choice,
you may be more or less limited here! I recommend picking your NIC in
conjunction with your OS or after-so you can confirm what support you'll
have.

**** Link Aggregation/Bonding and VLANs
     You may encounter a situation where you want the core components of your
     network to be on one subnet, and to have client devices on another; if
     you've got a switch that can allocate ports to VLANs, then you can use one
     larger, more capable switch to handle multiple subnets in parallel-but that
     does require that your drivers support multiple VLANs on the same
     connection, otherwise you'll need a separate connection from the router for
     each subnet.

**** Initial capacity requirement
     When choosing a NIC for your build, you should keep your throughput
     requirements in mind; if you host a media server inside your network, you
     may want to have higher throughput on your LAN connection than your
     WAN. Just try to keep your upstream and downstream in excess of what you'll
     need for your connection.

** Approaches

*** Pre-built
    Often slightly more expensive, but featureful systems. When looking at
    prebuilt equipment that runs pfSense or other similar firewall-oriented
    operating systems, you'll see purpose-built, but closer to commodity
    hardware than if buying from a vendor who builds a custom router OS like
    Ubiquiti or MikroTik.

**** QNAP
     Mostly a NAS vendor, they have some switches and network equipment,
     including what they call a [[https://www.qnap.com/en/product/qgd-1600p][smart edge switch]], which looks a lot like what
     we're describing here.

**** Netgate firewalls
     Ship with a pfSense license, this is great if you want an integrated
     solution.

*** Small Form Factor

**** Standard desktop box
     Any relatively recent SFF desktop will do, as long as you can install the
     parts you want to use in it!

**** PCEngines APU units
     Useful boards for custom installations; if you're very space constrained or
     have limited need for expandability, this might be a good choice.
     
*** Rackmount

**** Build your own
     Order parts from Supermicro, Tyan, other vendors, and build yourself a box!
     This is a more expensive route, but can be very rewarding.

**** Buy used
     There's plenty of 1U servers with fantastic loadouts available for
     relatively low prices. A manufacturer I was recently introduced to is HYVE,
     who have some really cute boxes.

** Considerations for expandability

*** Future network standards

**** Gigabit now, what next?
10 Gigabit hardware is getting really inexpensive! If you've got 8 PCIe gen 2
lanes available, you can have a dual SFP+ card.
**** Wireless upgrades
If you get a wireless card that can run in AP mode, you can use your router as
your access point-and even trade out parts to upgrade to new standards as they
become available.
*** Additional different hardware
**** Tensorflow PCIe!
You can use Tensorflow in hardware now, relatively cheaply. They're [[https://www.mouser.com/ProductDetail/Coral/G650-04527-01?qs=sGAEpiMZZMsG1k5vdNM%252Fcyg9iDc%25252Bz9JYkOSrS1TKoVU%253D][$35 at
Mouser.]] What would I do with these? I have no idea yet! But if you wanted to use
some tool like greylog to capture logs, you could run an ML model analysis on
it, and do so more efficiently.
**** TPU - the security one
Unfortunately TPU is now an overloaded term, but this device can be used to help
speed up security computations, and work as a HWRNG.

* Software stack

** Decide what matters to you

** Axes of choice

*** Graphical/web interface
    Some options are more configurable through webpages and graphical
    environments, but are less configurable through text interfaces; careful
    configuration of interfaces and potentially a VPN may be needed to remotely
    manage some of these stacks.

*** Preference in base OS
    The mon0wall derivatives (pfSense, OPNsense) are all FreeBSD derivatives; in
    other cases, you may prefer running a Linux kernel-for familiarity's sake,
    or because of hardware support.

*** Support model

    Paid support options exist for many firewall-oriented distros and
    derivatives; generally speaking, there's also community support available,
    but you may or may not find what you need in forums, especially when dealing
    with unusual hardware or network configurations.

* Configuring a router
  For our demo here, I'm going to use Fedora, and I'm going to configure it with
  very low-level tools, to highlight fine details that other systems might gloss
  over.
** Installing the OS

** Configuring IPv4 routing

*** The ~/proc/sys/net~ filesystem and ~/etc/sysctl.d~
    This filesystem will tell you a lot about the configuration of your network,
    and the files in ~/etc/sysctl.d~ will set values at boot which can also be
    dynamically configured; files in this folder are read in sort order, which
    is why files are usually prefixed with a number denoting importance, low to
    high. An example of a line in one of these config files is as follows:
#+BEGIN_SRC
net.ipv4.conf.all.log_martians = TRUE
#+END_SRC

This line sets ~/proc/sys/net/ipv4/conf/all/log_martians~ to ~TRUE~; that will
log any and all impossible addresses received by the machine to the kernel
log. This could be useful if you're seeing a lot of unrouteable traffic on your
network, for instance.

**** ~forwarding~
For every interface that's going to be routing traffic, you'll want to enable
this value. It's ~0~ for non-forwarding interfaces, and anything else for
forwarding interfaces. I'd probably just set it to ~1~.     

*** Multiple subnets and restricted routing

**** Non-routing subnet
     One useful configuration is to deliberately block IP forwarding on an
     interface, to restrict the potential for devices (IoT in particular) to
     leak information you might not want visible on the broader network.

     Normally, to collect information from IoT devices that aren't routing to
     the broader network, you need a dual-homed machine to collect logs or video
     streams, for instance; when you're running a full Linux install on your
     router, it /is/ a dual-homed machine, and can provide the access you
     need. If you want to do more to limit your firewall's exposure, you might
     consider a virtual machine; we'll talk about that in [[* Virtualized
     firewall]].

** Configuring IPv6 routing (Optional, recommended?)

*** SLAAC and PD-assigned address

**** accept_ra and the tri-state boolean
From [[https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt][ip-sysctl.txt]] in the Linux kernel documentation,
#+BEGIN_QUOTE
Possible values are:
    0 Do not accept Router Advertisements.
    1 Accept Router Advertisements if forwarding is disabled.
    2 Overrule forwarding behaviour. Accept Router Advertisements
      even if forwarding is enabled.
#+END_QUOTE

Note that this means we'll want to set ~accept_ra~ to ~2~ /specifically/ on our
WAN interface for IPv6 support.

*** 6to4 tunnel (Hurricane Electric)

** Configuring firewall rules

*** nftables versus frontends
Not really a "versus" here, but configuring nftables directly instead of using a
frontend is a viable path, and if you have custom logic for null-routing
specific IPs, you might want to have your own custom tooling writing your ~.nft~
files and applying them. For this talk, we'll use firewalld. It's close to the
same syntax, but has some nice-to-have details like port numbers having service
names.

*** Don't block ICMPv6!
    It's hard to stress this enough. Blocking ICMPv6 is a great way to cause
    arbitrary, difficult-to-diagnose slowdowns if you have IPv6 support
    enabled. This isn't going to improve your security posture, SLAAC with
    security extensions will handle that.

*** Forwarding and NAT

**** masquerade for IPv4

**** Restricting access for a given subnet
     As an extension of the concept of the [[* Non-routing subnet]] you can also
     have the firewall deny connections from an IoT device subnet into your main
     subnet or subnets.

** Throughput considerations

*** Jumbo Frames
The standard MTU is 1500B; this is fine in a reasonably fast network, but does
have a not-insignificant amount of overhead. That MTU includes the IP header,
after all, and especially on an IPv6 network, that can be quite large. On modern
hardware, there's really no problem with a 9000B MTU, and that's what I
recommend for standard configurations.

*** TCP offload
An interesting technology but not widely supported; the primary vendor who's
pushing for this tech is Chelsio; they've [[https://lwn.net/Articles/148697/][attempted in the past]] to get offload
support built into the Linux kernel, but were rebuked on the grounds that this
moves kernel decisions into a black box; we may yet see some changes in this
attitude, but it is generally outside the scope of this talk.

* Other configurations

** Virtualized firewall

*** Why

**** Reducing risk from compromise
Being the gateway device that has the most internet-facing surface area, your
firewall is a prime target for attack.
By running the firewall as a virtual
machine instead of as th

**** Virtual firewall for virtual machines
A common approach to securing multiple virtual services is to run a firewall VM
and have it act as the gateway for all of your virtual machines, instead of
having the host also operate as the gateway; this approach allows you to have
hidden services inside the network you've created, and treat your virtual
network as you would a physical network.

**** Quick update/deployment

Updates to a virtual machine, depending on the approach, can be applied
extremely quickly and with little downtime.

*** How

**** Pick your OS
Basically all the questions we asked above apply twice, now; we need to
determine how much physical RAM our VM host needs, and of that amount, how much
the VM needs. A multi-core processor, and preferably with a lot of cores, is
essential.

**** Connect your VM to the network

***** Bridging a physical NIC
One common approach is to connect the VM to one of the host machine's NICs
through a sort of bridge.

****** Linux Bridge interface
One option is to make your host also route packets, although this might be said
to defeat the purpose of the firewall here.

****** [[https://en.wikipedia.org/wiki/Promiscuous_mode][Promiscuous Mode NIC]]
In this mode the NIC passes all packets it receives to the kernel, which means
it can respond to multiple MAC addresses if the host(s) so choose; this is a
common approach to allow one or multiple VMs to share a network connection with
a host.

***** PCIe Passthrough NIC
For my virtual firewall setup, i've opted to dedicate an entire physical card
with multiple ports to the firewall, and thereby made my VM host indirectly
connected to the main network. To achieve this I ended up adding an instruction
to load ~pcistub~ as the driver for a specific device to the kernel command
line.

*** Issues you might run into

**** Drivers and PCIe Passthrough

**** Virtual bridged network
If you're using ~virsh~ to establish your networks, for a virtual network where
the firewall VM is the gateway, you'll need to specify how all your VMs attach
to it by configuring the network in their XML config to not have a forwarding
entry.

** Multiple firewalls
   Seen as a "defense in depth" strategy, this takes the medieval walled city
   approach to network design. Here, we have potentially two levels of network;
   we might want to keep "soft hosts"--personal computers, other relatively
   unsecured systems--behind a more restricted firewall, while still allowing
   machines operating as servers to have a more porous environment to work
   in--potentially with other untrusted devices there as well (such as IoT
   devices).

* Lab

Let's build a router real quick!

Set up a virtual firewall for other virtual hosts (mayyybe?)

For the purposes of this 
